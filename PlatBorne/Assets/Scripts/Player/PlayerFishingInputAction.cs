//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fishing.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FishingInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FishingInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Fishing"",
    ""maps"": [
        {
            ""name"": ""Fishing"",
            ""id"": ""94684a42-5dbd-457b-a1c7-7cfb9aa25c6f"",
            ""actions"": [
                {
                    ""name"": ""HookL"",
                    ""type"": ""Button"",
                    ""id"": ""395ab32c-06eb-486b-b8bd-c55ad78bd700"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HookR"",
                    ""type"": ""Button"",
                    ""id"": ""5030fd4e-b7b4-4c5e-8c77-d836c7c19807"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ea8502d-089e-4d70-b6d9-f6d9eec51071"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da05cbea-4372-4f93-907d-f98473512009"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Fishing
        m_Fishing = asset.FindActionMap("Fishing", throwIfNotFound: true);
        m_Fishing_HookL = m_Fishing.FindAction("HookL", throwIfNotFound: true);
        m_Fishing_HookR = m_Fishing.FindAction("HookR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fishing
    private readonly InputActionMap m_Fishing;
    private List<IFishingActions> m_FishingActionsCallbackInterfaces = new List<IFishingActions>();
    private readonly InputAction m_Fishing_HookL;
    private readonly InputAction m_Fishing_HookR;
    public struct FishingActions
    {
        private @FishingInputAction m_Wrapper;
        public FishingActions(@FishingInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @HookL => m_Wrapper.m_Fishing_HookL;
        public InputAction @HookR => m_Wrapper.m_Fishing_HookR;
        public InputActionMap Get() { return m_Wrapper.m_Fishing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishingActions set) { return set.Get(); }
        public void AddCallbacks(IFishingActions instance)
        {
            if (instance == null || m_Wrapper.m_FishingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishingActionsCallbackInterfaces.Add(instance);
            @HookL.started += instance.OnHookL;
            @HookL.performed += instance.OnHookL;
            @HookL.canceled += instance.OnHookL;
            @HookR.started += instance.OnHookR;
            @HookR.performed += instance.OnHookR;
            @HookR.canceled += instance.OnHookR;
        }

        private void UnregisterCallbacks(IFishingActions instance)
        {
            @HookL.started -= instance.OnHookL;
            @HookL.performed -= instance.OnHookL;
            @HookL.canceled -= instance.OnHookL;
            @HookR.started -= instance.OnHookR;
            @HookR.performed -= instance.OnHookR;
            @HookR.canceled -= instance.OnHookR;
        }

        public void RemoveCallbacks(IFishingActions instance)
        {
            if (m_Wrapper.m_FishingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishingActions instance)
        {
            foreach (var item in m_Wrapper.m_FishingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishingActions @Fishing => new FishingActions(this);
    public interface IFishingActions
    {
        void OnHookL(InputAction.CallbackContext context);
        void OnHookR(InputAction.CallbackContext context);
    }
}
