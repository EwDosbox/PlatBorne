//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Characters/Hunter/Hunter_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Hunter_Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Hunter_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Hunter_Input"",
    ""maps"": [
        {
            ""name"": ""Hunter"",
            ""id"": ""dfd79bc7-8d8f-4b23-93a0-f8a8c013586a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""724e8d31-4fba-48e7-90a8-2f8ab56c68c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""40decd41-4a2d-45b2-9607-90a9f9f37547"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""X-axis"",
                    ""id"": ""a616d170-4e29-4d5c-824e-21a9eaf31af8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc52b680-1707-4e36-8c3a-d0e4793a3f5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c04d9d68-7fc0-41b6-8d80-29043399bcfd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cea8b298-b6f3-49c5-acb0-edbd5fc97e90"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hunter
        m_Hunter = asset.FindActionMap("Hunter", throwIfNotFound: true);
        m_Hunter_Movement = m_Hunter.FindAction("Movement", throwIfNotFound: true);
        m_Hunter_Jump = m_Hunter.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hunter
    private readonly InputActionMap m_Hunter;
    private List<IHunterActions> m_HunterActionsCallbackInterfaces = new List<IHunterActions>();
    private readonly InputAction m_Hunter_Movement;
    private readonly InputAction m_Hunter_Jump;
    public struct HunterActions
    {
        private @Hunter_Input m_Wrapper;
        public HunterActions(@Hunter_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Hunter_Movement;
        public InputAction @Jump => m_Wrapper.m_Hunter_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Hunter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HunterActions set) { return set.Get(); }
        public void AddCallbacks(IHunterActions instance)
        {
            if (instance == null || m_Wrapper.m_HunterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HunterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IHunterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IHunterActions instance)
        {
            if (m_Wrapper.m_HunterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHunterActions instance)
        {
            foreach (var item in m_Wrapper.m_HunterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HunterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HunterActions @Hunter => new HunterActions(this);
    public interface IHunterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
